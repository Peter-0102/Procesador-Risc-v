--ALU para 32 bits
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity ALU is
    Port (
        OP1          : in  std_logic_vector(31 downto 0); 
        OP2          : in  std_logic_vector(31 downto 0);
        alu_op       : in  std_logic_vector(3 downto 0); 
        ALU_RESULTADO : out std_logic_vector(31 downto 0) 
    );
end ALU;

architecture ALU of ALU is
begin

    process (OP1, OP2, alu_op)
        variable temp: std_logic_vector(31 downto 0); 
        variable shift_amount: integer range 0 to 31; 
    begin
        
        shift_amount := to_integer(unsigned(OP2(4 downto 0)));

        
        case alu_op is
            -- 0000: Suma (Signed Addition)
            when "0000" =>
                ALU_RESULTADO <= std_logic_vector(signed(OP1) + signed(OP2));

            -- 0001: Resta (Signed Subtraction)
            when "0001" =>
                ALU_RESULTADO <= std_logic_vector(signed(OP1) - signed(OP2));

            -- 0010: Shift Left Logical (SLL)
            when "0010" =>
                temp := (others => '0'); -- Inicializar a ceros
                if shift_amount <= 31 then
                    temp(31 downto shift_amount) := OP1(31-shift_amount downto 0);
                end if;
                ALU_RESULTADO <= temp;

            -- 0011: Shift Right Logical (SRL)
            when "0011" =>
                temp := (others => '0'); -- Inicializar a ceros
                if shift_amount <= 31 then
                    temp(31-shift_amount downto 0) := OP1(31 downto shift_amount);
                end if;
                ALU_RESULTADO <= temp;

            -- 0111: Shift Right Arithmetic (SRA)
            when "0111" =>
                temp := (others => OP1(31)); --bit de signo
                if shift_amount <= 31 then
                    temp(31-shift_amount downto 0) := OP1(31 downto shift_amount);
                end if;
                ALU_RESULTADO <= temp;

            -- 0100: Set Less Than Unsigned (SLTU)
            when "0100" =>
                if unsigned(OP1) < unsigned(OP2) then
                    ALU_RESULTADO <= (31 downto 0 => '0');  
                    ALU_RESULTADO(0) <= '1'; --1 si OP1 < OP2
                else
                    ALU_RESULTADO <= (31 downto 0 => '0');
                end if;

            -- 0101: XOR
            when "0101" =>
                ALU_RESULTADO <= OP1 xor OP2;

            -- 1000: OR
            when "1000" =>
                ALU_RESULTADO <= OP1 or OP2;

            -- 1001: AND
            when "1001" =>
                ALU_RESULTADO <= OP1 and OP2;

            -- 0110: Set Less Than Signed (SLT)
            when "0110" =>
                if signed(OP1) < signed(OP2) then
                    ALU_RESULTADO <= (31 downto 0 => '0');  
                    ALU_RESULTADO(0) <= '1'; --1 si OP1 < OP2
                else
                    ALU_RESULTADO <= (31 downto 0 => '0');
                end if;

            when others =>
                ALU_RESULTADO <= (31 downto 0 => '0');
        end case;
    end process;

end ALU;
